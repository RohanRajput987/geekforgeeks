class Solution {
    private static void findParents(Node root, Map<Node, Node> map) {
        Queue<Node> q = new LinkedList<>();
        q.offer(root);
        while (!q.isEmpty()) {
            Node curr = q.poll();
            if (curr.left != null) {
                map.put(curr.left, curr);
                q.offer(curr.left);
            }
            if (curr.right != null) {
                map.put(curr.right, curr);
                q.offer(curr.right);
            }
        }
    }

    private static Node findNode(Node root, int start) {
        if (root == null) return null;
        if (root.data == start) return root;
        Node left = findNode(root.left, start);
        if (left != null) return left;
        return findNode(root.right, start);
    }

    public static int minTime(Node root, int start) {
        Map<Node, Node> parentMap = new HashMap<>();
        findParents(root, parentMap);
        
        Node startNode = findNode(root, start);
        if (startNode == null) return 0;

        Set<Node> visited = new HashSet<>();
        Queue<Node> q = new LinkedList<>();
        q.offer(startNode);
        visited.add(startNode);

        int time = -1;
        while (!q.isEmpty()) {
            int size = q.size();
            time++;
            for (int i = 0; i < size; i++) {
                Node curr = q.poll();

                if (curr.left != null && visited.add(curr.left)) {
                    q.offer(curr.left);
                }

                if (curr.right != null && visited.add(curr.right)) {
                    q.offer(curr.right);
                }

                Node parent = parentMap.get(curr);
                if (parent != null && visited.add(parent)) {
                    q.offer(parent);
                }
            }
        }

        return time;
    }
}
